# Generated by Django 5.2.3 on 2025-09-18 10:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0007_printrequest'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIPerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(max_length=100)),
                ('metric_value', models.FloatField()),
                ('metric_type', models.CharField(max_length=50)),
                ('context', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'AI Performance Metric',
                'verbose_name_plural': 'AI Performance Metrics',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AISentimentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('content_type', models.CharField(choices=[('service_review', 'Service Review'), ('vendor_feedback', 'Vendor Feedback'), ('general_feedback', 'General Feedback')], max_length=20)),
                ('content_id', models.IntegerField()),
                ('sentiment_score', models.FloatField()),
                ('sentiment_label', models.CharField(max_length=20)),
                ('confidence', models.FloatField(default=0.0)),
                ('keywords', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'AI Sentiment Analysis',
                'verbose_name_plural': 'AI Sentiment Analyses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIChatbotLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255)),
                ('query', models.TextField()),
                ('response', models.TextField()),
                ('intent', models.CharField(blank=True, max_length=100)),
                ('entities', models.JSONField(blank=True, default=dict)),
                ('confidence', models.FloatField(default=0.0)),
                ('response_time', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Chatbot Log',
                'verbose_name_plural': 'AI Chatbot Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255, unique=True)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Conversation',
                'verbose_name_plural': 'AI Conversations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='AIMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('user', 'User Message'), ('assistant', 'AI Assistant'), ('system', 'System Message')], max_length=20)),
                ('content', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tokens_used', models.IntegerField(default=0)),
                ('response_time', models.FloatField(default=0.0)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai.aiconversation')),
            ],
            options={
                'verbose_name': 'AI Message',
                'verbose_name_plural': 'AI Messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIServiceRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence_score', models.FloatField(default=0.0)),
                ('reason', models.TextField(blank=True)),
                ('context', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_clicked', models.BooleanField(default=False)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to='services.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Service Recommendation',
                'verbose_name_plural': 'AI Service Recommendations',
                'ordering': ['-confidence_score', '-created_at'],
                'unique_together': {('user', 'service')},
            },
        ),
    ]
