# analytics/models.py
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from decimal import Decimal

User = get_user_model()


class VendorAnalytics(models.Model):
    """
    Analytics data for vendors.
    Stores aggregated analytics data for performance.
    """
    vendor = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='analytics',
        help_text="The vendor this analytics data belongs to"
    )
    date = models.DateField(
        help_text="Date this analytics data represents"
    )
    period = models.CharField(
        max_length=10,
        choices=[
            ('daily', 'Daily'),
            ('weekly', 'Weekly'),
            ('monthly', 'Monthly'),
            ('yearly', 'Yearly'),
        ],
        help_text="Time period for this analytics data"
    )
    
    # Revenue metrics
    total_revenue = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        default=0,
        help_text="Total revenue for this period"
    )
    order_count = models.PositiveIntegerField(
        default=0,
        help_text="Number of orders for this period"
    )
    completed_orders = models.PositiveIntegerField(
        default=0,
        help_text="Number of completed orders for this period"
    )
    cancelled_orders = models.PositiveIntegerField(
        default=0,
        help_text="Number of cancelled orders for this period"
    )
    
    # Customer metrics
    unique_customers = models.PositiveIntegerField(
        default=0,
        help_text="Number of unique customers for this period"
    )
    new_customers = models.PositiveIntegerField(
        default=0,
        help_text="Number of new customers for this period"
    )
    
    # Service metrics
    popular_services = models.JSONField(
        default=dict,
        help_text="Popular services data for this period"
    )
    
    # Location insights
    location_insights = models.JSONField(
        default=dict,
        help_text="Location-based insights for this period"
    )
    
    # Demand heatmap data
    demand_heatmap = models.JSONField(
        default=dict,
        help_text="Demand heatmap data for this period"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['vendor', 'date', 'period']
        ordering = ['-date', '-created_at']
    
    def __str__(self):
        return f"{self.vendor.username} - {self.date} ({self.period})"


class ServiceAnalytics(models.Model):
    """
    Analytics data for individual services.
    """
    service = models.ForeignKey(
        'services.Service',
        on_delete=models.CASCADE,
        related_name='analytics',
        help_text="The service this analytics data belongs to"
    )
    date = models.DateField(
        help_text="Date this analytics data represents"
    )
    period = models.CharField(
        max_length=10,
        choices=[
            ('daily', 'Daily'),
            ('weekly', 'Weekly'),
            ('monthly', 'Monthly'),
            ('yearly', 'Yearly'),
        ],
        help_text="Time period for this analytics data"
    )
    
    # Service-specific metrics
    views = models.PositiveIntegerField(
        default=0,
        help_text="Number of views for this service"
    )
    orders = models.PositiveIntegerField(
        default=0,
        help_text="Number of orders for this service"
    )
    revenue = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        default=0,
        help_text="Revenue generated by this service"
    )
    rating = models.DecimalField(
        max_digits=3,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Average rating for this service"
    )
    rating_count = models.PositiveIntegerField(
        default=0,
        help_text="Number of ratings for this service"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['service', 'date', 'period']
        ordering = ['-date', '-created_at']
    
    def __str__(self):
        return f"{self.service.service_name} - {self.date} ({self.period})"